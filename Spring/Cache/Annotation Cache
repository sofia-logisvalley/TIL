2018 10 22

#Spring

##Cache

'토비의 스프링 3.1 Vol.2'에 있는 캐시 추상화 캡쳐를 공부했습니다 작업하면서 사용하였고, 공부하면서 정리해보았습니다

1. 어노테이션을 이용한 캐시 속성 부여
- @Cacheable
  이름이 암시하듯이 @Cacheable는 캐시할 수 있는 메서드를 지정하는데 사용한다. 
  즉, 이 어노테이션을 사용한 메서드는 결과를 캐시에 저장하므로 뒤이은 호출(같은 인자일 때)에는 실제로 메서드를 실행하지 않고 캐시에 저장된 값을 반환한다.
  가장 간단한 형식으로는 어노테이션이 붙은 메서드와 연관된 캐시의 이름만 있으면 어노테이션을 선언할 수 있다.

  @RedisCacheable(value="topAccountExceedLimit", key=" 값 ")
  public boolean isCheckAccountExceedLimit(int id, String info){
    return ( getAcountCount(id, info) > Account_Exceed_Limit ) ? true : false;
  }
  
  @Cacheable(value="book", condition="#name.length < 32")
  public Book findBook(String name){
    return ...;
  }
  이렇게 조건부 캐싱도 가능하다

- @CacheEvict
  캐시는 적절한 시점에 제거돼야 한다. 
  기본적으로 메솓의 키 값에 해당하는 캐시만 제거하고, 
  저장된 값을 모두 제거할 필요가 있다면 두번째 파라미터에 'allEntries=true'로 설정해주면 된다.
  
  @RedisCacheEvict(value="topAccountExceedLimit", key=" 값 ")
	public void deleteCheckAccountExceedLimit(int id, String info){
	}
  
  이런식으로 'deleteCheckAccountExceedLimit' 메소드 호출시 캐시내용이 제거된다. 
  
- @CachePut
  Cacheable과 비슷하게 메소드 실행 결과를 캐시에 저장하지만, 저장된 캐시의 내용을 사용하지 않고, 항상 메소드를 실행한다는 점이 다르다.
  한 번에 캐시에 많은 정보를 저장해두는 작업이다. 다른 사용자가 참고할 정보를 생성하는 용도로만 사용되는 메소드에 이용한다.

    @CachePut(cacheManager="redisCacheManager")
    public @interface RedisCachePut {    
      @AliasFor(annotation = CachePut.class)
      String[] value() default {};    
    }
캐

