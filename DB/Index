2018 10 23

#DB

##인덱스 공부
MYSQL과 MSSQL 설계 및 유지보수 하면서 DB 공부가 필요한 시기가 왔다고 생각이 되어 인덱스 공부를 시작으로 정리해볼 생각입니다
참고 페이지 :https://jojoldu.tistory.com/243

[MYSQL 인덱스 정리]
1. 인덱스란?
인덱스 == 정렬

인덱스는 결국 지정한 컬럼들을 기준으로 메모리 영역에 일종의 목차를 생성하는 것이다.
insert, update, delete (Command)의 성능을 희생하고 대신 "select (Query)"의 성능을 향상시킨다. 
여기서 주의할 것은 update, delete 행위가 느린것이지, update, delete를 하기 위해 해당 데이터를 조회하는것은 인덱스가 있으면 빠르게 조회가 된다. 
인덱스가 없는 컬럼을 조건으로 update, delete를 하게 되면 굉장히 느려 많은 양의 데이터를 삭제 해야하는 상황에선 
인덱스로 지정된 컬럼을 기준으로 진행하는것이 좋습니다

2. 인덱스 키 값의 크기
InnoDB (MySQL)은 디스크에 데이터를 저장하는 가장 기본 단위를 페이지라고 하며, 인덱스 역시 페이지 단위로 관리가 된다. 
(B-Tree 인덱스 구조에서 Root, Branch, Leaf 참고)

페이지는 16KB 로 크기가 고정되어 있습니다.

만약 본인이 설정한 인덱스 키의 크기가 16 Byte 라고 하고, 자식노드(Branch, Leaf)의 주소(위 인덱스 구조 그림 참고)가 담긴 크기가 
12 Byte 정도로 잡으면, 16*1024 / (16+12) = 585로 인해 하나의 페이지에는 585개가 저장될 수 있다. 
여기서 인덱스 키가 32 Byte로 커지면? 
->16*1024 / (32+12) = 372로 되어 372개만 한 페이지에 저장할 수 있다.

조회 결과로 500개의 row를 읽을때 16byte일때는 1개의 페이지에서 다 조회가 되지만, 
32byte일때는 2개의 페이지를 읽어야 하므로 이는 성능 저하가 발행하게 된다.

 * 인덱스의 키는 길면 길수록 성능상 이슈가 있습니다.


3. 인덱스 컬럼 기준
먼저 1개의 컬럼만 인덱스를 걸어야 한다면, 해당 컬럼은 카디널리티(Cardinality)가 가장 높은 것을 잡아야 한다는 점이다.

카디널리티(Cardinality)란 해당 컬럼의 중복된 수치를 나타낸다. 
예를 들어 성별, 학년 등은 카디널리티가 낮다고 얘기하고, 
반대로 주민등록번호, 계좌번호 등은 카디널리티가 높다고 얘기한다.

인덱스로 최대한 효율을 뽑아내려면, 해당 인덱스로 많은 부분을 걸러내야 하기 때문이다.
만약 성별을 인덱스로 잡는다면, 남/녀 중 하나를 선택하기 때문에 인덱스를 통해 50%밖에 걸러내지 못한다. 
하지만 주민등록번호나 계좌번호 같은 경우엔 인덱스를 통해 데이터의 대부분을 걸러내기 때문에 빠르게 검색이 가능하다.

3-1. 여러 컬럼으로 인덱스 구성시 기준
만약
여러 컬럼으로 인덱스를 잡는다면 어떤 순서로 인덱스를 구성하는게 좋을지 개발하면서 
고민해 보아야 한다.

-> 여러 컬럼으로 인덱스를 잡는다면 카디널리티가 높은순에서 낮은순으로 구성하는게 더 성능이 뛰어나다는걸 기억.




